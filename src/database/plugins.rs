//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "plugins")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub address: String,
    #[sea_orm(column_type = "Text")]
    pub symbol: String,
    #[sea_orm(column_type = "Double")]
    pub total_supply: f64,
    #[sea_orm(column_type = "Double")]
    pub reserve0: f64,
    #[sea_orm(column_type = "Double")]
    pub reserve1: f64,
    #[sea_orm(column_type = "Text")]
    pub gauge_address: String,
    #[sea_orm(column_type = "Double")]
    pub tvl: f64,
    #[sea_orm(column_type = "Text")]
    pub token0_address: String,
    pub token0: Json,
    #[sea_orm(column_type = "Text")]
    pub token1_address: String,
    pub token1: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::aprs::Entity")]
    Aprs,
    #[sea_orm(
        belongs_to = "super::assets::Entity",
        from = "Column::Token0Address",
        to = "super::assets::Column::Address",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Assets2,
    #[sea_orm(
        belongs_to = "super::assets::Entity",
        from = "Column::Token1Address",
        to = "super::assets::Column::Address",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Assets1,
    #[sea_orm(has_many = "super::bribes::Entity")]
    Bribes,
    #[sea_orm(has_many = "super::gauges::Entity")]
    Gauges,
}

impl Related<super::aprs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Aprs.def()
    }
}

impl Related<super::bribes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bribes.def()
    }
}

impl Related<super::gauges::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Gauges.def()
    }
}

impl Related<super::assets::Entity> for Entity {
    fn to() -> RelationDef {
        super::aprs::Relation::Assets.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::aprs::Relation::Plugins.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
