//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "aprs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub pair_address: String,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub token_address: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub chain_id: i32,
    #[sea_orm(column_type = "Double", nullable)]
    pub apr: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub min_apr: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub max_apr: Option<f64>,
    #[sea_orm(column_type = "Text")]
    pub symbol: String,
    #[sea_orm(column_type = "Text")]
    pub logo_url: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::assets::Entity",
        from = "(Column::TokenAddress, Column::TokenAddress, Column::ChainId, Column::ChainId)",
        to = "(super::assets::Column::Address, super::assets::Column::ChainId, super::assets::Column::ChainId, super::assets::Column::Address)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Assets,
    #[sea_orm(
        belongs_to = "super::pairs::Entity",
        from = "(Column::PairAddress, Column::PairAddress, Column::ChainId, Column::ChainId)",
        to = "(super::pairs::Column::Address, super::pairs::Column::ChainId, super::pairs::Column::ChainId, super::pairs::Column::Address)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Pairs,
}

impl Related<super::assets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Assets.def()
    }
}

impl Related<super::pairs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pairs.def()
    }
}

impl Related<super::bribes::Entity> for Entity {
    fn to() -> RelationDef {
        super::assets::Relation::Bribes.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::assets::Relation::Aprs.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
