//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "gauges")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub address: String,
    pub decimals: i32,
    #[sea_orm(column_type = "Double")]
    pub total_supply: f64,
    #[sea_orm(column_type = "Text")]
    pub bribe_address: String,
    #[sea_orm(column_type = "Double")]
    pub reward: f64,
    #[sea_orm(column_type = "Double")]
    pub median_tbv: f64,
    #[sea_orm(column_type = "Double")]
    pub min_tbv: f64,
    #[sea_orm(column_type = "Double")]
    pub max_tbv: f64,
    #[sea_orm(column_type = "Double")]
    pub votes: f64,
    #[sea_orm(column_type = "Double")]
    pub min_apr: f64,
    #[sea_orm(column_type = "Double")]
    pub max_apr: f64,
    #[sea_orm(column_type = "Text")]
    pub plugin_address: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::plugins::Entity",
        from = "Column::PluginAddress",
        to = "super::plugins::Column::Address",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Plugins,
}

impl Related<super::plugins::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Plugins.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
